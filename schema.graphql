
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  # _contains: String_Selector
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  twitterUsername: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  twitterUsername: String_Selector
  groups: String_Array_Selector
  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  twitterUsername: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Emails
type Email {
  name: String 
  template: String 
  subject: String 
  path: String 
}


input DeleteEmailInput{
  filter: EmailFilterInput
  id: String
}

input SingleEmailInput {
  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EmailSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiEmailInput {

  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleEmailOutput{
  result: Email
}

type  MultiEmailOutput{
  results: [Email]
  totalCount: Int
}

type EmailMutationOutput{
  data: Email
}

input EmailFilterInput {
  _and: [EmailFilterInput]
  _not: EmailFilterInput
  _or: [EmailFilterInput]


  name: String_Selector
  template: String_Selector
  subject: String_Selector
  path: String_Selector
}

input EmailSortInput {
  name: SortOptions
  template: SortOptions
  subject: SortOptions
  path: SortOptions
}

input EmailSelectorInput {
  _and: [EmailSelectorInput]
  _or: [EmailSelectorInput]

}

input EmailSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Settings
type Setting {
  name: String 
  value: JSON 
  defaultValue: JSON 
  isPublic: Boolean 
  description: String 
}


input DeleteSettingInput{
  filter: SettingFilterInput
  id: String
}

input SingleSettingInput {
  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SettingSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiSettingInput {

  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleSettingOutput{
  result: Setting
}

type  MultiSettingOutput{
  results: [Setting]
  totalCount: Int
}

type SettingMutationOutput{
  data: Setting
}

input SettingFilterInput {
  _and: [SettingFilterInput]
  _not: SettingFilterInput
  _or: [SettingFilterInput]


  name: String_Selector


  isPublic: Boolean_Selector
  description: String_Selector
}

input SettingSortInput {
  name: SortOptions
  value: SortOptions
  defaultValue: SortOptions
  isPublic: SortOptions
  description: SortOptions
}

input SettingSelectorInput {
  _and: [SettingSelectorInput]
  _or: [SettingSelectorInput]

}

input SettingSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Callbacks
type Callback {
  name: String 
  iterator: JSON 
  properties: [JSON] 
  runs: String 
  newSyntax: Boolean 
  returns: String 
  description: String 
  hooks: [String] 
}


input DeleteCallbackInput{
  filter: CallbackFilterInput
  id: String
}

input SingleCallbackInput {
  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CallbackSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCallbackInput {

  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleCallbackOutput{
  result: Callback
}

type  MultiCallbackOutput{
  results: [Callback]
  totalCount: Int
}

type CallbackMutationOutput{
  data: Callback
}

input CallbackFilterInput {
  _and: [CallbackFilterInput]
  _not: CallbackFilterInput
  _or: [CallbackFilterInput]


  name: String_Selector


  runs: String_Selector
  newSyntax: Boolean_Selector
  returns: String_Selector
  description: String_Selector

}

input CallbackSortInput {
  name: SortOptions
  iterator: SortOptions
  properties: SortOptions
  runs: SortOptions
  newSyntax: SortOptions
  returns: SortOptions
  description: SortOptions
  hooks: SortOptions
}

input CallbackSelectorInput {
  _and: [CallbackSelectorInput]
  _or: [CallbackSelectorInput]

}

input CallbackSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Games
type Game {
  _id: String 
  createdAt: Date 
  name: String 
  slug: String 
  level: String 
  currentExpPoints: String 
  maxLevel: String 
  totalExpPoints: String 
  zork: String 
  bwam: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicName: String 
}


input DeleteGameInput{
  filter: GameFilterInput
  id: String
}

input SingleGameInput {
  # filtering
  filter: GameFilterInput
  sort: GameSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: GameSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiGameInput {

  # filtering
  filter: GameFilterInput
  sort: GameSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleGameOutput{
  result: Game
}

type  MultiGameOutput{
  results: [Game]
  totalCount: Int
}

type GameMutationOutput{
  data: Game
}

input CreateGameInput {
  data: CreateGameDataInput!
}

input CreateGameDataInput {
  name: String 
  slug: String 
  level: String 
  currentExpPoints: String 
  maxLevel: String 
  totalExpPoints: String 
  zork: String 
  bwam: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicName: String 
}

input UpdateGameInput{
  filter: GameFilterInput
  id: String
  data: UpdateGameDataInput!
}

input UpsertGameInput{
  filter: GameFilterInput
  id: String
  data: UpdateGameDataInput!
}

input UpdateGameDataInput {
  name: String 
  slug: String 
  level: String 
  currentExpPoints: String 
  maxLevel: String 
  totalExpPoints: String 
  zork: String 
  bwam: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicName: String 
}

input GameFilterInput {
  _and: [GameFilterInput]
  _not: GameFilterInput
  _or: [GameFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  slug: String_Selector
  level: String_Selector
  currentExpPoints: String_Selector
  maxLevel: String_Selector
  totalExpPoints: String_Selector
  zork: String_Selector
  bwam: String_Selector
  _sh_: String_Selector
  currentMusicUrl: String_Selector
  currentMusicName: String_Selector
}

input GameSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  slug: SortOptions
  level: SortOptions
  currentExpPoints: SortOptions
  maxLevel: SortOptions
  totalExpPoints: SortOptions
  zork: SortOptions
  bwam: SortOptions
  _sh_: SortOptions
  currentMusicUrl: SortOptions
  currentMusicName: SortOptions
}

input GameSelectorInput {
  _and: [GameSelectorInput]
  _or: [GameSelectorInput]

}

input GameSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Messages
type Message {
  _id: String 
  createdAt: Date 
  text: String 
  gameId: String 
}


input DeleteMessageInput{
  filter: MessageFilterInput
  id: String
}

input SingleMessageInput {
  # filtering
  filter: MessageFilterInput
  sort: MessageSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: MessageSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiMessageInput {

  # filtering
  filter: MessageFilterInput
  sort: MessageSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleMessageOutput{
  result: Message
}

type  MultiMessageOutput{
  results: [Message]
  totalCount: Int
}

type MessageMutationOutput{
  data: Message
}

input CreateMessageInput {
  data: CreateMessageDataInput!
}

input CreateMessageDataInput {
  text: String 
  gameId: String 
}

input UpdateMessageInput{
  filter: MessageFilterInput
  id: String
  data: UpdateMessageDataInput!
}

input UpsertMessageInput{
  filter: MessageFilterInput
  id: String
  data: UpdateMessageDataInput!
}

input UpdateMessageDataInput {
  text: String 
  gameId: String 
}

input MessageFilterInput {
  _and: [MessageFilterInput]
  _not: MessageFilterInput
  _or: [MessageFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  text: String_Selector
  gameId: String_Selector
}

input MessageSortInput {
  _id: SortOptions
  createdAt: SortOptions
  text: SortOptions
  gameId: SortOptions
}

input MessageSelectorInput {
  _and: [MessageSelectorInput]
  _or: [MessageSelectorInput]

}

input MessageSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Handles
type Handle {
  _id: String 
  createdAt: Date 
  name: String 
}


input DeleteHandleInput{
  filter: HandleFilterInput
  id: String
}

input SingleHandleInput {
  # filtering
  filter: HandleFilterInput
  sort: HandleSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: HandleSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiHandleInput {

  # filtering
  filter: HandleFilterInput
  sort: HandleSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleHandleOutput{
  result: Handle
}

type  MultiHandleOutput{
  results: [Handle]
  totalCount: Int
}

type HandleMutationOutput{
  data: Handle
}

input CreateHandleInput {
  data: CreateHandleDataInput!
}

input CreateHandleDataInput {
  name: String 
}

input UpdateHandleInput{
  filter: HandleFilterInput
  id: String
  data: UpdateHandleDataInput!
}

input UpsertHandleInput{
  filter: HandleFilterInput
  id: String
  data: UpdateHandleDataInput!
}

input UpdateHandleDataInput {
  name: String 
}

input HandleFilterInput {
  _and: [HandleFilterInput]
  _not: HandleFilterInput
  _or: [HandleFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
}

input HandleSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
}

input HandleSelectorInput {
  _and: [HandleSelectorInput]
  _or: [HandleSelectorInput]

}

input HandleSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Markets
type Market {
  _id: String 
  createdAt: Date 
}


input DeleteMarketInput{
  filter: MarketFilterInput
  id: String
}

input SingleMarketInput {
  # filtering
  filter: MarketFilterInput
  sort: MarketSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: MarketSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiMarketInput {

  # filtering
  filter: MarketFilterInput
  sort: MarketSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleMarketOutput{
  result: Market
}

type  MultiMarketOutput{
  results: [Market]
  totalCount: Int
}

type MarketMutationOutput{
  data: Market
}

input MarketFilterInput {
  _and: [MarketFilterInput]
  _not: MarketFilterInput
  _or: [MarketFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
}

input MarketSortInput {
  _id: SortOptions
  createdAt: SortOptions
}

input MarketSelectorInput {
  _and: [MarketSelectorInput]
  _or: [MarketSelectorInput]

}

input MarketSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  siteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  emails(input: MultiEmailInput):  MultiEmailOutput
  
  settings(input: MultiSettingInput):  MultiSettingOutput
  
  callbacks(input: MultiCallbackInput):  MultiCallbackOutput
  
  # A single Game document fetched by ID or slug
  game(input: SingleGameInput!): SingleGameOutput
  
  # A list of Game documents matching a set of query terms
  games(input: MultiGameInput):  MultiGameOutput
  
  # A single Message document fetched by ID or slug
  message(input: SingleMessageInput!): SingleMessageOutput
  
  # A list of Message documents matching a set of query terms
  messages(input: MultiMessageInput):  MultiMessageOutput
  
  # A single Handle document fetched by ID or slug
  handle(input: SingleHandleInput!): SingleHandleOutput
  
  # A list of Handle documents matching a set of query terms
  handles(input: MultiHandleInput):  MultiHandleOutput
  
  # A single Market document fetched by ID or slug
  market(input: SingleMarketInput!): SingleMarketOutput
  
  # A list of Market documents matching a set of query terms
  markets(input: MultiMarketInput):  MultiMarketOutput
  
}
  

type Mutation {
  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new Game documents
  createGame(
  input: CreateGameInput,
  "Deprecated (use 'input' field instead)."
  data: CreateGameDataInput
) : GameMutationOutput

  # Mutation for updating a Game document
  updateGame(
  input: UpdateGameInput,
  "Deprecated (use 'input' field instead)."
  selector: GameSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateGameDataInput 
) : GameMutationOutput

  # Mutation for upserting a Game document
  upsertGame(
  input: UpsertGameInput,
  "Deprecated (use 'input' field instead)."
  selector: GameSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateGameDataInput
) : GameMutationOutput

  # Mutation for deleting a Game document
  deleteGame(
  input: DeleteGameInput,
  "Deprecated (use 'input' field instead)."
  selector: GameSelectorUniqueInput
) : GameMutationOutput

  # Mutation for creating new Message documents
  createMessage(
  input: CreateMessageInput,
  "Deprecated (use 'input' field instead)."
  data: CreateMessageDataInput
) : MessageMutationOutput

  # Mutation for updating a Message document
  updateMessage(
  input: UpdateMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateMessageDataInput 
) : MessageMutationOutput

  # Mutation for upserting a Message document
  upsertMessage(
  input: UpsertMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateMessageDataInput
) : MessageMutationOutput

  # Mutation for deleting a Message document
  deleteMessage(
  input: DeleteMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput
) : MessageMutationOutput

  # Mutation for creating new Handle documents
  createHandle(
  input: CreateHandleInput,
  "Deprecated (use 'input' field instead)."
  data: CreateHandleDataInput
) : HandleMutationOutput

  # Mutation for updating a Handle document
  updateHandle(
  input: UpdateHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleDataInput 
) : HandleMutationOutput

  # Mutation for upserting a Handle document
  upsertHandle(
  input: UpsertHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleDataInput
) : HandleMutationOutput

  # Mutation for deleting a Handle document
  deleteHandle(
  input: DeleteHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput
) : HandleMutationOutput

  # Mutation for deleting a Market document
  deleteMarket(
  input: DeleteMarketInput,
  "Deprecated (use 'input' field instead)."
  selector: MarketSelectorUniqueInput
) : MarketMutationOutput

}


