
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  # _contains: String_Selector
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

  input AuthPasswordInput {
    email: String
    password: String
  }
  type AuthResult {
    token: String
    userId: String
  }
  type LogoutResult {
    userId: String
  }

  input SignupInput {
    email: String
    password: String
  }
  type SignupResult {
    userId: String
  }

  input SetPasswordInput {
    newPassword: String
  }

  #type SetPasswordResult # Will auth user again so we reuse AuthResult atm

  input ResetPasswordInput {
    token: String
    newPassword: String
  }
  type ResetPasswordResult {
    userId: String
  }

  input VerifyEmailInput {
    token: String
  }
  type VerifyEmailResult {
    userId: String
  }

  input AuthEmailInput {
    email: String
  }


# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  twitterUsername: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  twitterUsername: String_Selector
  groups: String_Array_Selector
  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  twitterUsername: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Emails
type Email {
  name: String 
  template: String 
  subject: String 
  path: String 
}


input DeleteEmailInput{
  filter: EmailFilterInput
  id: String
}

input SingleEmailInput {
  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EmailSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiEmailInput {

  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleEmailOutput{
  result: Email
}

type  MultiEmailOutput{
  results: [Email]
  totalCount: Int
}

type EmailMutationOutput{
  data: Email
}

input EmailFilterInput {
  _and: [EmailFilterInput]
  _not: EmailFilterInput
  _or: [EmailFilterInput]


  name: String_Selector
  template: String_Selector
  subject: String_Selector
  path: String_Selector
}

input EmailSortInput {
  name: SortOptions
  template: SortOptions
  subject: SortOptions
  path: SortOptions
}

input EmailSelectorInput {
  _and: [EmailSelectorInput]
  _or: [EmailSelectorInput]

}

input EmailSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Settings
type Setting {
  name: String 
  value: JSON 
  defaultValue: JSON 
  isPublic: Boolean 
  description: String 
}


input DeleteSettingInput{
  filter: SettingFilterInput
  id: String
}

input SingleSettingInput {
  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SettingSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiSettingInput {

  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleSettingOutput{
  result: Setting
}

type  MultiSettingOutput{
  results: [Setting]
  totalCount: Int
}

type SettingMutationOutput{
  data: Setting
}

input SettingFilterInput {
  _and: [SettingFilterInput]
  _not: SettingFilterInput
  _or: [SettingFilterInput]


  name: String_Selector


  isPublic: Boolean_Selector
  description: String_Selector
}

input SettingSortInput {
  name: SortOptions
  value: SortOptions
  defaultValue: SortOptions
  isPublic: SortOptions
  description: SortOptions
}

input SettingSelectorInput {
  _and: [SettingSelectorInput]
  _or: [SettingSelectorInput]

}

input SettingSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Callbacks
type Callback {
  name: String 
  iterator: JSON 
  properties: [JSON] 
  runs: String 
  newSyntax: Boolean 
  returns: String 
  description: String 
  hooks: [String] 
}


input DeleteCallbackInput{
  filter: CallbackFilterInput
  id: String
}

input SingleCallbackInput {
  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CallbackSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCallbackInput {

  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleCallbackOutput{
  result: Callback
}

type  MultiCallbackOutput{
  results: [Callback]
  totalCount: Int
}

type CallbackMutationOutput{
  data: Callback
}

input CallbackFilterInput {
  _and: [CallbackFilterInput]
  _not: CallbackFilterInput
  _or: [CallbackFilterInput]


  name: String_Selector


  runs: String_Selector
  newSyntax: Boolean_Selector
  returns: String_Selector
  description: String_Selector

}

input CallbackSortInput {
  name: SortOptions
  iterator: SortOptions
  properties: SortOptions
  runs: SortOptions
  newSyntax: SortOptions
  returns: SortOptions
  description: SortOptions
  hooks: SortOptions
}

input CallbackSelectorInput {
  _and: [CallbackSelectorInput]
  _or: [CallbackSelectorInput]

}

input CallbackSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for ColorSchemes
type ColorScheme {
  _id: String 
  createdAt: Date 
  name: String 
  color: String 
  backgroundColor: String 
  linkColor: String 
  altColor: String 
}


input DeleteColorSchemeInput{
  filter: ColorSchemeFilterInput
  id: String
}

input SingleColorSchemeInput {
  # filtering
  filter: ColorSchemeFilterInput
  sort: ColorSchemeSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: ColorSchemeSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiColorSchemeInput {

  # filtering
  filter: ColorSchemeFilterInput
  sort: ColorSchemeSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleColorSchemeOutput{
  result: ColorScheme
}

type  MultiColorSchemeOutput{
  results: [ColorScheme]
  totalCount: Int
}

type ColorSchemeMutationOutput{
  data: ColorScheme
}

input CreateColorSchemeInput {
  data: CreateColorSchemeDataInput!
}

input CreateColorSchemeDataInput {
  name: String 
  color: String 
  backgroundColor: String 
  linkColor: String 
  altColor: String 
}

input UpdateColorSchemeInput{
  filter: ColorSchemeFilterInput
  id: String
  data: UpdateColorSchemeDataInput!
}

input UpsertColorSchemeInput{
  filter: ColorSchemeFilterInput
  id: String
  data: UpdateColorSchemeDataInput!
}

input UpdateColorSchemeDataInput {
  name: String 
  color: String 
  backgroundColor: String 
  linkColor: String 
  altColor: String 
}

input ColorSchemeFilterInput {
  _and: [ColorSchemeFilterInput]
  _not: ColorSchemeFilterInput
  _or: [ColorSchemeFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  color: String_Selector
  backgroundColor: String_Selector
  linkColor: String_Selector
  altColor: String_Selector
}

input ColorSchemeSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  color: SortOptions
  backgroundColor: SortOptions
  linkColor: SortOptions
  altColor: SortOptions
}

input ColorSchemeSelectorInput {
  _and: [ColorSchemeSelectorInput]
  _or: [ColorSchemeSelectorInput]

}

input ColorSchemeSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Shs
type Sh {
  _id: String 
  createdAt: Date 
  salutation: String 
  leftBumper: String 
  text: String 
  rightBumper: String 
  colorSchemeId: String 
  colorScheme: ColorScheme 
}


input DeleteShInput{
  filter: ShFilterInput
  id: String
}

input SingleShInput {
  # filtering
  filter: ShFilterInput
  sort: ShSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: ShSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiShInput {

  # filtering
  filter: ShFilterInput
  sort: ShSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleShOutput{
  result: Sh
}

type  MultiShOutput{
  results: [Sh]
  totalCount: Int
}

type ShMutationOutput{
  data: Sh
}

input CreateShInput {
  data: CreateShDataInput!
}

input CreateShDataInput {
  createdAt: Date 
  salutation: String 
  leftBumper: String 
  text: String 
  rightBumper: String 
  colorSchemeId: String 
}

input UpdateShInput{
  filter: ShFilterInput
  id: String
  data: UpdateShDataInput!
}

input UpsertShInput{
  filter: ShFilterInput
  id: String
  data: UpdateShDataInput!
}

input UpdateShDataInput {
  createdAt: Date 
  salutation: String 
  leftBumper: String 
  text: String 
  rightBumper: String 
  colorSchemeId: String 
}

input ShFilterInput {
  _and: [ShFilterInput]
  _not: ShFilterInput
  _or: [ShFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  salutation: String_Selector
  leftBumper: String_Selector
  text: String_Selector
  rightBumper: String_Selector
  colorSchemeId: String_Selector
}

input ShSortInput {
  _id: SortOptions
  createdAt: SortOptions
  salutation: SortOptions
  leftBumper: SortOptions
  text: SortOptions
  rightBumper: SortOptions
  colorSchemeId: SortOptions
}

input ShSelectorInput {
  _and: [ShSelectorInput]
  _or: [ShSelectorInput]

}

input ShSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for I18ns
type I18n {
  _id: String 
  createdAt: Date 
  name: String 
  description: String 
  glyphSet: String 
  wikiUrl: String 
  i18nRooms: [I18nRoom] 
}


input DeleteI18nInput{
  filter: I18nFilterInput
  id: String
}

input SingleI18nInput {
  # filtering
  filter: I18nFilterInput
  sort: I18nSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: I18nSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiI18nInput {

  # filtering
  filter: I18nFilterInput
  sort: I18nSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleI18nOutput{
  result: I18n
}

type  MultiI18nOutput{
  results: [I18n]
  totalCount: Int
}

type I18nMutationOutput{
  data: I18n
}

input CreateI18nInput {
  data: CreateI18nDataInput!
}

input CreateI18nDataInput {
  name: String 
  description: String 
  glyphSet: String 
  wikiUrl: String 
}

input UpdateI18nInput{
  filter: I18nFilterInput
  id: String
  data: UpdateI18nDataInput!
}

input UpsertI18nInput{
  filter: I18nFilterInput
  id: String
  data: UpdateI18nDataInput!
}

input UpdateI18nDataInput {
  name: String 
  description: String 
  glyphSet: String 
  wikiUrl: String 
}

input I18nFilterInput {
  _and: [I18nFilterInput]
  _not: I18nFilterInput
  _or: [I18nFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  description: String_Selector
  glyphSet: String_Selector
  wikiUrl: String_Selector
  i18nRooms: String_Selector
}

input I18nSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  description: SortOptions
  glyphSet: SortOptions
  wikiUrl: SortOptions
  i18nRooms: SortOptions
}

input I18nSelectorInput {
  _and: [I18nSelectorInput]
  _or: [I18nSelectorInput]

}

input I18nSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Handles
type Handle {
  _id: String 
  createdAt: Date 
  name: String 
  description: String 
  note: String 
  mood: String 
  isActive: Boolean 
  isHonorary: Boolean 
  inventory: [String] 
  parties: [HandleParty] 
  connectionStatus: String 
  currencies: [HandleCurrency] 
  roomId: String 
}


input DeleteHandleInput{
  filter: HandleFilterInput
  id: String
}

input SingleHandleInput {
  # filtering
  filter: HandleFilterInput
  sort: HandleSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: HandleSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiHandleInput {

  # filtering
  filter: HandleFilterInput
  sort: HandleSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleHandleOutput{
  result: Handle
}

type  MultiHandleOutput{
  results: [Handle]
  totalCount: Int
}

type HandleMutationOutput{
  data: Handle
}

input CreateHandleInput {
  data: CreateHandleDataInput!
}

input CreateHandleDataInput {
  name: String 
  description: String 
  note: String 
  mood: String 
  isActive: Boolean 
  isHonorary: Boolean 
  inventory: [String] 
}

input UpdateHandleInput{
  filter: HandleFilterInput
  id: String
  data: UpdateHandleDataInput!
}

input UpsertHandleInput{
  filter: HandleFilterInput
  id: String
  data: UpdateHandleDataInput!
}

input UpdateHandleDataInput {
  name: String 
  description: String 
  note: String 
  mood: String 
  isActive: Boolean 
  isHonorary: Boolean 
  inventory: [String] 
}

input HandleFilterInput {
  _and: [HandleFilterInput]
  _not: HandleFilterInput
  _or: [HandleFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  description: String_Selector
  note: String_Selector
  mood: String_Selector
  isActive: Boolean_Selector
  isHonorary: Boolean_Selector
  inventory: String_Array_Selector
  parties: String_Selector
  connectionStatus: String_Selector
  currencies: String_Selector
  roomId: String_Selector
}

input HandleSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  description: SortOptions
  note: SortOptions
  mood: SortOptions
  isActive: SortOptions
  isHonorary: SortOptions
  inventory: SortOptions
  parties: SortOptions
  connectionStatus: SortOptions
  currencies: SortOptions
  roomId: SortOptions
}

input HandleSelectorInput {
  _and: [HandleSelectorInput]
  _or: [HandleSelectorInput]

}

input HandleSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Parties
type Party {
  _id: String 
  createdAt: Date 
  name: String 
  colorSchemeId: String 
  colorScheme: ColorScheme 
  description: String 
  isActive: Boolean 
  mood: String 
  isEsteemed: Boolean 
  handles: [HandleParty] 
  connectionStatus: String 
  i18ns: [PartyI18n] 
}


input DeletePartyInput{
  filter: PartyFilterInput
  id: String
}

input SinglePartyInput {
  # filtering
  filter: PartyFilterInput
  sort: PartySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PartySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiPartyInput {

  # filtering
  filter: PartyFilterInput
  sort: PartySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SinglePartyOutput{
  result: Party
}

type  MultiPartyOutput{
  results: [Party]
  totalCount: Int
}

type PartyMutationOutput{
  data: Party
}

input CreatePartyInput {
  data: CreatePartyDataInput!
}

input CreatePartyDataInput {
  name: String 
  colorSchemeId: String 
  description: String 
  isActive: Boolean 
  mood: String 
  isEsteemed: Boolean 
  connectionStatus: String 
}

input UpdatePartyInput{
  filter: PartyFilterInput
  id: String
  data: UpdatePartyDataInput!
}

input UpsertPartyInput{
  filter: PartyFilterInput
  id: String
  data: UpdatePartyDataInput!
}

input UpdatePartyDataInput {
  name: String 
  colorSchemeId: String 
  description: String 
  isActive: Boolean 
  mood: String 
  isEsteemed: Boolean 
  connectionStatus: String 
}

input PartyFilterInput {
  _and: [PartyFilterInput]
  _not: PartyFilterInput
  _or: [PartyFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  colorSchemeId: String_Selector
  description: String_Selector
  isActive: Boolean_Selector
  mood: String_Selector
  isEsteemed: Boolean_Selector
  handles: String_Selector
  connectionStatus: String_Selector
  i18ns: String_Selector
}

input PartySortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  colorSchemeId: SortOptions
  description: SortOptions
  isActive: SortOptions
  mood: SortOptions
  isEsteemed: SortOptions
  handles: SortOptions
  connectionStatus: SortOptions
  i18ns: SortOptions
}

input PartySelectorInput {
  _and: [PartySelectorInput]
  _or: [PartySelectorInput]

}

input PartySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for HandleParties
type HandleParty {
  _id: String 
  createdAt: Date 
  partyId: String 
  party: Party 
  handleId: String 
  handle: Handle 
  connectionStatus: String 
  isMod: Boolean 
}


input DeleteHandlePartyInput{
  filter: HandlePartyFilterInput
  id: String
}

input SingleHandlePartyInput {
  # filtering
  filter: HandlePartyFilterInput
  sort: HandlePartySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: HandlePartySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiHandlePartyInput {

  # filtering
  filter: HandlePartyFilterInput
  sort: HandlePartySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleHandlePartyOutput{
  result: HandleParty
}

type  MultiHandlePartyOutput{
  results: [HandleParty]
  totalCount: Int
}

type HandlePartyMutationOutput{
  data: HandleParty
}

input CreateHandlePartyInput {
  data: CreateHandlePartyDataInput!
}

input CreateHandlePartyDataInput {
  partyId: String 
  handleId: String 
  connectionStatus: String 
  isMod: Boolean 
}

input UpdateHandlePartyInput{
  filter: HandlePartyFilterInput
  id: String
  data: UpdateHandlePartyDataInput!
}

input UpsertHandlePartyInput{
  filter: HandlePartyFilterInput
  id: String
  data: UpdateHandlePartyDataInput!
}

input UpdateHandlePartyDataInput {
  partyId: String 
  handleId: String 
  connectionStatus: String 
  isMod: Boolean 
}

input HandlePartyFilterInput {
  _and: [HandlePartyFilterInput]
  _not: HandlePartyFilterInput
  _or: [HandlePartyFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  partyId: String_Selector
  handleId: String_Selector
  connectionStatus: String_Selector
  isMod: Boolean_Selector
}

input HandlePartySortInput {
  _id: SortOptions
  createdAt: SortOptions
  partyId: SortOptions
  handleId: SortOptions
  connectionStatus: SortOptions
  isMod: SortOptions
}

input HandlePartySelectorInput {
  _and: [HandlePartySelectorInput]
  _or: [HandlePartySelectorInput]

}

input HandlePartySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for PartyI18ns
type PartyI18n {
  _id: String 
  createdAt: Date 
  partyId: String 
  party: Party 
  i18nId: String 
  i18n: I18n 
  fluency: Float 
}


input DeletePartyI18nInput{
  filter: PartyI18nFilterInput
  id: String
}

input SinglePartyI18nInput {
  # filtering
  filter: PartyI18nFilterInput
  sort: PartyI18nSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PartyI18nSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiPartyI18nInput {

  # filtering
  filter: PartyI18nFilterInput
  sort: PartyI18nSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SinglePartyI18nOutput{
  result: PartyI18n
}

type  MultiPartyI18nOutput{
  results: [PartyI18n]
  totalCount: Int
}

type PartyI18nMutationOutput{
  data: PartyI18n
}

input CreatePartyI18nInput {
  data: CreatePartyI18nDataInput!
}

input CreatePartyI18nDataInput {
  partyId: String 
  i18nId: String 
  fluency: Float 
}

input UpdatePartyI18nInput{
  filter: PartyI18nFilterInput
  id: String
  data: UpdatePartyI18nDataInput!
}

input UpsertPartyI18nInput{
  filter: PartyI18nFilterInput
  id: String
  data: UpdatePartyI18nDataInput!
}

input UpdatePartyI18nDataInput {
  partyId: String 
  i18nId: String 
  fluency: Float 
}

input PartyI18nFilterInput {
  _and: [PartyI18nFilterInput]
  _not: PartyI18nFilterInput
  _or: [PartyI18nFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  partyId: String_Selector
  i18nId: String_Selector
  fluency: Float_Selector
}

input PartyI18nSortInput {
  _id: SortOptions
  createdAt: SortOptions
  partyId: SortOptions
  i18nId: SortOptions
  fluency: SortOptions
}

input PartyI18nSelectorInput {
  _and: [PartyI18nSelectorInput]
  _or: [PartyI18nSelectorInput]

}

input PartyI18nSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Currencies
type Currency {
  _id: String 
  createdAt: Date 
  name: String 
  glyph: String 
  description: String 
  ledgerUrl: String 
  handles: [HandleCurrency] 
}


input DeleteCurrencyInput{
  filter: CurrencyFilterInput
  id: String
}

input SingleCurrencyInput {
  # filtering
  filter: CurrencyFilterInput
  sort: CurrencySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CurrencySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCurrencyInput {

  # filtering
  filter: CurrencyFilterInput
  sort: CurrencySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleCurrencyOutput{
  result: Currency
}

type  MultiCurrencyOutput{
  results: [Currency]
  totalCount: Int
}

type CurrencyMutationOutput{
  data: Currency
}

input CreateCurrencyInput {
  data: CreateCurrencyDataInput!
}

input CreateCurrencyDataInput {
  name: String 
  glyph: String 
  description: String 
  ledgerUrl: String 
}

input UpdateCurrencyInput{
  filter: CurrencyFilterInput
  id: String
  data: UpdateCurrencyDataInput!
}

input UpsertCurrencyInput{
  filter: CurrencyFilterInput
  id: String
  data: UpdateCurrencyDataInput!
}

input UpdateCurrencyDataInput {
  name: String 
  glyph: String 
  description: String 
  ledgerUrl: String 
}

input CurrencyFilterInput {
  _and: [CurrencyFilterInput]
  _not: CurrencyFilterInput
  _or: [CurrencyFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  glyph: String_Selector
  description: String_Selector
  ledgerUrl: String_Selector
  handles: String_Selector
}

input CurrencySortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  glyph: SortOptions
  description: SortOptions
  ledgerUrl: SortOptions
  handles: SortOptions
}

input CurrencySelectorInput {
  _and: [CurrencySelectorInput]
  _or: [CurrencySelectorInput]

}

input CurrencySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for HandleCurrencies
type HandleCurrency {
  _id: String 
  createdAt: Date 
  amount: Float 
  mood: String 
  note: String 
  handleId: String 
  handle: Handle 
  currencyId: String 
  currency: Currency 
}


input DeleteHandleCurrencyInput{
  filter: HandleCurrencyFilterInput
  id: String
}

input SingleHandleCurrencyInput {
  # filtering
  filter: HandleCurrencyFilterInput
  sort: HandleCurrencySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: HandleCurrencySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiHandleCurrencyInput {

  # filtering
  filter: HandleCurrencyFilterInput
  sort: HandleCurrencySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleHandleCurrencyOutput{
  result: HandleCurrency
}

type  MultiHandleCurrencyOutput{
  results: [HandleCurrency]
  totalCount: Int
}

type HandleCurrencyMutationOutput{
  data: HandleCurrency
}

input CreateHandleCurrencyInput {
  data: CreateHandleCurrencyDataInput!
}

input CreateHandleCurrencyDataInput {
  amount: Float 
  mood: String 
  note: String 
  handleId: String 
  currencyId: String 
}

input UpdateHandleCurrencyInput{
  filter: HandleCurrencyFilterInput
  id: String
  data: UpdateHandleCurrencyDataInput!
}

input UpsertHandleCurrencyInput{
  filter: HandleCurrencyFilterInput
  id: String
  data: UpdateHandleCurrencyDataInput!
}

input UpdateHandleCurrencyDataInput {
  amount: Float 
  mood: String 
  note: String 
  handleId: String 
  currencyId: String 
}

input HandleCurrencyFilterInput {
  _and: [HandleCurrencyFilterInput]
  _not: HandleCurrencyFilterInput
  _or: [HandleCurrencyFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  amount: Float_Selector
  mood: String_Selector
  note: String_Selector
  handleId: String_Selector
  currencyId: String_Selector
}

input HandleCurrencySortInput {
  _id: SortOptions
  createdAt: SortOptions
  amount: SortOptions
  mood: SortOptions
  note: SortOptions
  handleId: SortOptions
  currencyId: SortOptions
}

input HandleCurrencySelectorInput {
  _and: [HandleCurrencySelectorInput]
  _or: [HandleCurrencySelectorInput]

}

input HandleCurrencySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Messages
type Message {
  _id: String 
  createdAt: Date 
  text: String 
  roomId: String 
  type: String 
  shId: String 
  _sh_: Sh 
}


input DeleteMessageInput{
  filter: MessageFilterInput
  id: String
}

input SingleMessageInput {
  # filtering
  filter: MessageFilterInput
  sort: MessageSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: MessageSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiMessageInput {

  # filtering
  filter: MessageFilterInput
  sort: MessageSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleMessageOutput{
  result: Message
}

type  MultiMessageOutput{
  results: [Message]
  totalCount: Int
}

type MessageMutationOutput{
  data: Message
}

input CreateMessageInput {
  data: CreateMessageDataInput!
}

input CreateMessageDataInput {
  text: String 
  roomId: String 
  type: String 
  shId: String 
}

input UpdateMessageInput{
  filter: MessageFilterInput
  id: String
  data: UpdateMessageDataInput!
}

input UpsertMessageInput{
  filter: MessageFilterInput
  id: String
  data: UpdateMessageDataInput!
}

input UpdateMessageDataInput {
  text: String 
  roomId: String 
  type: String 
  shId: String 
}

input MessageFilterInput {
  _and: [MessageFilterInput]
  _not: MessageFilterInput
  _or: [MessageFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  text: String_Selector
  roomId: String_Selector
  type: String_Selector
  shId: String_Selector
}

input MessageSortInput {
  _id: SortOptions
  createdAt: SortOptions
  text: SortOptions
  roomId: SortOptions
  type: SortOptions
  shId: SortOptions
}

input MessageSelectorInput {
  _and: [MessageSelectorInput]
  _or: [MessageSelectorInput]

}

input MessageSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Rooms
type Room {
  _id: String 
  createdAt: Date 
  isFeatured: Boolean 
  name: String 
  messageDelay: Float 
  slug: String 
  description: String 
  connectionStatus: String 
  isActive: Boolean 
  zork: String 
  bwam: String 
  vibe: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicTitle: String 
  colorSchemeId: String 
  colorScheme: ColorScheme 
  i18nRooms: [I18nRoom] 
  roomHandles: [RoomHandle] 
  areDJMessagesMuted: Boolean 
  areCannonMessagesMuted: Boolean 
  currentExpPoints: String 
  totalExpPoints: String 
  level: String 
  maxLevel: String 
  gameStart: String 
  gameEnd: String 
}


input DeleteRoomInput{
  filter: RoomFilterInput
  id: String
}

input SingleRoomInput {
  # filtering
  filter: RoomFilterInput
  sort: RoomSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: RoomSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiRoomInput {

  # filtering
  filter: RoomFilterInput
  sort: RoomSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleRoomOutput{
  result: Room
}

type  MultiRoomOutput{
  results: [Room]
  totalCount: Int
}

type RoomMutationOutput{
  data: Room
}

input CreateRoomInput {
  data: CreateRoomDataInput!
}

input CreateRoomDataInput {
  isFeatured: Boolean 
  name: String 
  messageDelay: Float 
  slug: String 
  description: String 
  connectionStatus: String 
  isActive: Boolean 
  zork: String 
  bwam: String 
  vibe: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicTitle: String 
  colorSchemeId: String 
  areDJMessagesMuted: Boolean 
  areCannonMessagesMuted: Boolean 
  currentExpPoints: String 
  totalExpPoints: String 
  level: String 
  maxLevel: String 
}

input UpdateRoomInput{
  filter: RoomFilterInput
  id: String
  data: UpdateRoomDataInput!
}

input UpsertRoomInput{
  filter: RoomFilterInput
  id: String
  data: UpdateRoomDataInput!
}

input UpdateRoomDataInput {
  isFeatured: Boolean 
  name: String 
  messageDelay: Float 
  slug: String 
  description: String 
  connectionStatus: String 
  isActive: Boolean 
  zork: String 
  bwam: String 
  vibe: String 
  _sh_: String 
  currentMusicUrl: String 
  currentMusicTitle: String 
  colorSchemeId: String 
  areDJMessagesMuted: Boolean 
  areCannonMessagesMuted: Boolean 
  currentExpPoints: String 
  totalExpPoints: String 
  level: String 
  maxLevel: String 
}

input RoomFilterInput {
  _and: [RoomFilterInput]
  _not: RoomFilterInput
  _or: [RoomFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  isFeatured: Boolean_Selector
  name: String_Selector
  messageDelay: Float_Selector
  slug: String_Selector
  description: String_Selector
  connectionStatus: String_Selector
  isActive: Boolean_Selector
  zork: String_Selector
  bwam: String_Selector
  vibe: String_Selector
  _sh_: String_Selector
  currentMusicUrl: String_Selector
  currentMusicTitle: String_Selector
  colorSchemeId: String_Selector
  i18nRooms: String_Selector
  roomHandles: String_Selector
  areDJMessagesMuted: Boolean_Selector
  areCannonMessagesMuted: Boolean_Selector
  currentExpPoints: String_Selector
  totalExpPoints: String_Selector
  level: String_Selector
  maxLevel: String_Selector
  gameStart: String_Selector
  gameEnd: String_Selector
}

input RoomSortInput {
  _id: SortOptions
  createdAt: SortOptions
  isFeatured: SortOptions
  name: SortOptions
  messageDelay: SortOptions
  slug: SortOptions
  description: SortOptions
  connectionStatus: SortOptions
  isActive: SortOptions
  zork: SortOptions
  bwam: SortOptions
  vibe: SortOptions
  _sh_: SortOptions
  currentMusicUrl: SortOptions
  currentMusicTitle: SortOptions
  colorSchemeId: SortOptions
  i18nRooms: SortOptions
  roomHandles: SortOptions
  areDJMessagesMuted: SortOptions
  areCannonMessagesMuted: SortOptions
  currentExpPoints: SortOptions
  totalExpPoints: SortOptions
  level: SortOptions
  maxLevel: SortOptions
  gameStart: SortOptions
  gameEnd: SortOptions
}

input RoomSelectorInput {
  _and: [RoomSelectorInput]
  _or: [RoomSelectorInput]

}

input RoomSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for I18nRooms
type I18nRoom {
  _id: String 
  createdAt: Date 
  i18nId: String 
  i18n: I18n 
  roomId: String 
  room: Room 
}


input DeleteI18nRoomInput{
  filter: I18nRoomFilterInput
  id: String
}

input SingleI18nRoomInput {
  # filtering
  filter: I18nRoomFilterInput
  sort: I18nRoomSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: I18nRoomSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiI18nRoomInput {

  # filtering
  filter: I18nRoomFilterInput
  sort: I18nRoomSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleI18nRoomOutput{
  result: I18nRoom
}

type  MultiI18nRoomOutput{
  results: [I18nRoom]
  totalCount: Int
}

type I18nRoomMutationOutput{
  data: I18nRoom
}

input CreateI18nRoomInput {
  data: CreateI18nRoomDataInput!
}

input CreateI18nRoomDataInput {
  i18nId: String 
  roomId: String 
}

input UpdateI18nRoomInput{
  filter: I18nRoomFilterInput
  id: String
  data: UpdateI18nRoomDataInput!
}

input UpsertI18nRoomInput{
  filter: I18nRoomFilterInput
  id: String
  data: UpdateI18nRoomDataInput!
}

input UpdateI18nRoomDataInput {
  i18nId: String 
  roomId: String 
}

input I18nRoomFilterInput {
  _and: [I18nRoomFilterInput]
  _not: I18nRoomFilterInput
  _or: [I18nRoomFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  i18nId: String_Selector
  roomId: String_Selector
}

input I18nRoomSortInput {
  _id: SortOptions
  createdAt: SortOptions
  i18nId: SortOptions
  roomId: SortOptions
}

input I18nRoomSelectorInput {
  _and: [I18nRoomSelectorInput]
  _or: [I18nRoomSelectorInput]

}

input I18nRoomSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for RoomHandles
type RoomHandle {
  _id: String 
  createdAt: Date 
  handleId: String 
  handle: Handle 
  roomId: String 
  room: Room 
  isMod: Boolean 
  isDJ: Boolean 
  isCannon: Boolean 
}


input DeleteRoomHandleInput{
  filter: RoomHandleFilterInput
  id: String
}

input SingleRoomHandleInput {
  # filtering
  filter: RoomHandleFilterInput
  sort: RoomHandleSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: RoomHandleSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiRoomHandleInput {

  # filtering
  filter: RoomHandleFilterInput
  sort: RoomHandleSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleRoomHandleOutput{
  result: RoomHandle
}

type  MultiRoomHandleOutput{
  results: [RoomHandle]
  totalCount: Int
}

type RoomHandleMutationOutput{
  data: RoomHandle
}

input CreateRoomHandleInput {
  data: CreateRoomHandleDataInput!
}

input CreateRoomHandleDataInput {
  handleId: String 
  roomId: String 
  isMod: Boolean 
  isDJ: Boolean 
  isCannon: Boolean 
}

input UpdateRoomHandleInput{
  filter: RoomHandleFilterInput
  id: String
  data: UpdateRoomHandleDataInput!
}

input UpsertRoomHandleInput{
  filter: RoomHandleFilterInput
  id: String
  data: UpdateRoomHandleDataInput!
}

input UpdateRoomHandleDataInput {
  handleId: String 
  roomId: String 
  isMod: Boolean 
  isDJ: Boolean 
  isCannon: Boolean 
}

input RoomHandleFilterInput {
  _and: [RoomHandleFilterInput]
  _not: RoomHandleFilterInput
  _or: [RoomHandleFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  handleId: String_Selector
  roomId: String_Selector
  isMod: Boolean_Selector
  isDJ: Boolean_Selector
  isCannon: Boolean_Selector
}

input RoomHandleSortInput {
  _id: SortOptions
  createdAt: SortOptions
  handleId: SortOptions
  roomId: SortOptions
  isMod: SortOptions
  isDJ: SortOptions
  isCannon: SortOptions
}

input RoomHandleSelectorInput {
  _and: [RoomHandleSelectorInput]
  _or: [RoomHandleSelectorInput]

}

input RoomHandleSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Equipment
type Equipment {
  _id: String 
  createdAt: Date 
  name: String 
  description: String 
  glyph: String 
  wikiUrl: String 
}


input DeleteEquipmentInput{
  filter: EquipmentFilterInput
  id: String
}

input SingleEquipmentInput {
  # filtering
  filter: EquipmentFilterInput
  sort: EquipmentSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EquipmentSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiEquipmentInput {

  # filtering
  filter: EquipmentFilterInput
  sort: EquipmentSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleEquipmentOutput{
  result: Equipment
}

type  MultiEquipmentOutput{
  results: [Equipment]
  totalCount: Int
}

type EquipmentMutationOutput{
  data: Equipment
}

input EquipmentFilterInput {
  _and: [EquipmentFilterInput]
  _not: EquipmentFilterInput
  _or: [EquipmentFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  description: String_Selector
  glyph: String_Selector
  wikiUrl: String_Selector
}

input EquipmentSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  description: SortOptions
  glyph: SortOptions
  wikiUrl: SortOptions
}

input EquipmentSelectorInput {
  _and: [EquipmentSelectorInput]
  _or: [EquipmentSelectorInput]

}

input EquipmentSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Laws
type Law {
  _id: String 
  createdAt: Date 
}


input DeleteLawInput{
  filter: LawFilterInput
  id: String
}

input SingleLawInput {
  # filtering
  filter: LawFilterInput
  sort: LawSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: LawSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiLawInput {

  # filtering
  filter: LawFilterInput
  sort: LawSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

type SingleLawOutput{
  result: Law
}

type  MultiLawOutput{
  results: [Law]
  totalCount: Int
}

type LawMutationOutput{
  data: Law
}

input LawFilterInput {
  _and: [LawFilterInput]
  _not: LawFilterInput
  _or: [LawFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
}

input LawSortInput {
  _id: SortOptions
  createdAt: SortOptions
}

input LawSelectorInput {
  _and: [LawSelectorInput]
  _or: [LawSelectorInput]

}

input LawSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  siteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  emails(input: MultiEmailInput):  MultiEmailOutput
  
  settings(input: MultiSettingInput):  MultiSettingOutput
  
  callbacks(input: MultiCallbackInput):  MultiCallbackOutput
  
  # A single ColorScheme document fetched by ID or slug
  colorScheme(input: SingleColorSchemeInput!): SingleColorSchemeOutput
  
  # A list of ColorScheme documents matching a set of query terms
  colorSchemes(input: MultiColorSchemeInput):  MultiColorSchemeOutput
  
  # A single Sh document fetched by ID or slug
  sh(input: SingleShInput!): SingleShOutput
  
  # A list of Sh documents matching a set of query terms
  shes(input: MultiShInput):  MultiShOutput
  
  # A single I18n document fetched by ID or slug
  i18n(input: SingleI18nInput!): SingleI18nOutput
  
  # A list of I18n documents matching a set of query terms
  i18ns(input: MultiI18nInput):  MultiI18nOutput
  
  # A single Handle document fetched by ID or slug
  handle(input: SingleHandleInput!): SingleHandleOutput
  
  # A list of Handle documents matching a set of query terms
  handles(input: MultiHandleInput):  MultiHandleOutput
  
  # A single Party document fetched by ID or slug
  party(input: SinglePartyInput!): SinglePartyOutput
  
  # A list of Party documents matching a set of query terms
  parties(input: MultiPartyInput):  MultiPartyOutput
  
  # A single HandleParty document fetched by ID or slug
  handleParty(input: SingleHandlePartyInput!): SingleHandlePartyOutput
  
  # A list of HandleParty documents matching a set of query terms
  handleParties(input: MultiHandlePartyInput):  MultiHandlePartyOutput
  
  # A single PartyI18n document fetched by ID or slug
  partyI18n(input: SinglePartyI18nInput!): SinglePartyI18nOutput
  
  # A list of PartyI18n documents matching a set of query terms
  partyI18ns(input: MultiPartyI18nInput):  MultiPartyI18nOutput
  
  # A single Currency document fetched by ID or slug
  currency(input: SingleCurrencyInput!): SingleCurrencyOutput
  
  # A list of Currency documents matching a set of query terms
  currencies(input: MultiCurrencyInput):  MultiCurrencyOutput
  
  # A single HandleCurrency document fetched by ID or slug
  handleCurrency(input: SingleHandleCurrencyInput!): SingleHandleCurrencyOutput
  
  # A list of HandleCurrency documents matching a set of query terms
  handleCurrencies(input: MultiHandleCurrencyInput):  MultiHandleCurrencyOutput
  
  # A single Message document fetched by ID or slug
  message(input: SingleMessageInput!): SingleMessageOutput
  
  # A list of Message documents matching a set of query terms
  messages(input: MultiMessageInput):  MultiMessageOutput
  
  # A single Room document fetched by ID or slug
  room(input: SingleRoomInput!): SingleRoomOutput
  
  # A list of Room documents matching a set of query terms
  rooms(input: MultiRoomInput):  MultiRoomOutput
  
  # A single I18nRoom document fetched by ID or slug
  i18nRoom(input: SingleI18nRoomInput!): SingleI18nRoomOutput
  
  # A list of I18nRoom documents matching a set of query terms
  i18nRooms(input: MultiI18nRoomInput):  MultiI18nRoomOutput
  
  # A single RoomHandle document fetched by ID or slug
  roomHandle(input: SingleRoomHandleInput!): SingleRoomHandleOutput
  
  # A list of RoomHandle documents matching a set of query terms
  roomHandles(input: MultiRoomHandleInput):  MultiRoomHandleOutput
  
  # A single Equipment document fetched by ID or slug
  equipment(input: SingleEquipmentInput!): SingleEquipmentOutput
  
  # A list of Equipment documents matching a set of query terms
  equipments(input: MultiEquipmentInput):  MultiEquipmentOutput
  
  # A single Law document fetched by ID or slug
  law(input: SingleLawInput!): SingleLawOutput
  
  # A list of Law documents matching a set of query terms
  laws(input: MultiLawInput):  MultiLawOutput
  
}
  

type Mutation {
  authenticateWithPassword(input: AuthPasswordInput): AuthResult

  logout: LogoutResult

  signup(input: SignupInput): SignupResult

  setPassword(input: SetPasswordInput): AuthResult

  sendResetPasswordEmail(input: AuthEmailInput): Boolean

  resetPassword(input: ResetPasswordInput): ResetPasswordResult

  sendVerificationEmail(input: AuthEmailInput): Boolean

  verifyEmail(input: VerifyEmailInput): VerifyEmailResult

  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new ColorScheme documents
  createColorScheme(
  input: CreateColorSchemeInput,
  "Deprecated (use 'input' field instead)."
  data: CreateColorSchemeDataInput
) : ColorSchemeMutationOutput

  # Mutation for updating a ColorScheme document
  updateColorScheme(
  input: UpdateColorSchemeInput,
  "Deprecated (use 'input' field instead)."
  selector: ColorSchemeSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateColorSchemeDataInput 
) : ColorSchemeMutationOutput

  # Mutation for upserting a ColorScheme document
  upsertColorScheme(
  input: UpsertColorSchemeInput,
  "Deprecated (use 'input' field instead)."
  selector: ColorSchemeSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateColorSchemeDataInput
) : ColorSchemeMutationOutput

  # Mutation for deleting a ColorScheme document
  deleteColorScheme(
  input: DeleteColorSchemeInput,
  "Deprecated (use 'input' field instead)."
  selector: ColorSchemeSelectorUniqueInput
) : ColorSchemeMutationOutput

  # Mutation for creating new Sh documents
  createSh(
  input: CreateShInput,
  "Deprecated (use 'input' field instead)."
  data: CreateShDataInput
) : ShMutationOutput

  # Mutation for updating a Sh document
  updateSh(
  input: UpdateShInput,
  "Deprecated (use 'input' field instead)."
  selector: ShSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateShDataInput 
) : ShMutationOutput

  # Mutation for upserting a Sh document
  upsertSh(
  input: UpsertShInput,
  "Deprecated (use 'input' field instead)."
  selector: ShSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateShDataInput
) : ShMutationOutput

  # Mutation for deleting a Sh document
  deleteSh(
  input: DeleteShInput,
  "Deprecated (use 'input' field instead)."
  selector: ShSelectorUniqueInput
) : ShMutationOutput

  # Mutation for creating new I18n documents
  createI18n(
  input: CreateI18nInput,
  "Deprecated (use 'input' field instead)."
  data: CreateI18nDataInput
) : I18nMutationOutput

  # Mutation for updating a I18n document
  updateI18n(
  input: UpdateI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateI18nDataInput 
) : I18nMutationOutput

  # Mutation for upserting a I18n document
  upsertI18n(
  input: UpsertI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateI18nDataInput
) : I18nMutationOutput

  # Mutation for deleting a I18n document
  deleteI18n(
  input: DeleteI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nSelectorUniqueInput
) : I18nMutationOutput

  # Mutation for creating new Handle documents
  createHandle(
  input: CreateHandleInput,
  "Deprecated (use 'input' field instead)."
  data: CreateHandleDataInput
) : HandleMutationOutput

  # Mutation for updating a Handle document
  updateHandle(
  input: UpdateHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleDataInput 
) : HandleMutationOutput

  # Mutation for upserting a Handle document
  upsertHandle(
  input: UpsertHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleDataInput
) : HandleMutationOutput

  # Mutation for deleting a Handle document
  deleteHandle(
  input: DeleteHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleSelectorUniqueInput
) : HandleMutationOutput

  # Mutation for creating new Party documents
  createParty(
  input: CreatePartyInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePartyDataInput
) : PartyMutationOutput

  # Mutation for updating a Party document
  updateParty(
  input: UpdatePartyInput,
  "Deprecated (use 'input' field instead)."
  selector: PartySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePartyDataInput 
) : PartyMutationOutput

  # Mutation for upserting a Party document
  upsertParty(
  input: UpsertPartyInput,
  "Deprecated (use 'input' field instead)."
  selector: PartySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePartyDataInput
) : PartyMutationOutput

  # Mutation for deleting a Party document
  deleteParty(
  input: DeletePartyInput,
  "Deprecated (use 'input' field instead)."
  selector: PartySelectorUniqueInput
) : PartyMutationOutput

  # Mutation for creating new HandleParty documents
  createHandleParty(
  input: CreateHandlePartyInput,
  "Deprecated (use 'input' field instead)."
  data: CreateHandlePartyDataInput
) : HandlePartyMutationOutput

  # Mutation for updating a HandleParty document
  updateHandleParty(
  input: UpdateHandlePartyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandlePartySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandlePartyDataInput 
) : HandlePartyMutationOutput

  # Mutation for upserting a HandleParty document
  upsertHandleParty(
  input: UpsertHandlePartyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandlePartySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandlePartyDataInput
) : HandlePartyMutationOutput

  # Mutation for deleting a HandleParty document
  deleteHandleParty(
  input: DeleteHandlePartyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandlePartySelectorUniqueInput
) : HandlePartyMutationOutput

  # Mutation for creating new PartyI18n documents
  createPartyI18n(
  input: CreatePartyI18nInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePartyI18nDataInput
) : PartyI18nMutationOutput

  # Mutation for updating a PartyI18n document
  updatePartyI18n(
  input: UpdatePartyI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: PartyI18nSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePartyI18nDataInput 
) : PartyI18nMutationOutput

  # Mutation for upserting a PartyI18n document
  upsertPartyI18n(
  input: UpsertPartyI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: PartyI18nSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePartyI18nDataInput
) : PartyI18nMutationOutput

  # Mutation for deleting a PartyI18n document
  deletePartyI18n(
  input: DeletePartyI18nInput,
  "Deprecated (use 'input' field instead)."
  selector: PartyI18nSelectorUniqueInput
) : PartyI18nMutationOutput

  # Mutation for creating new Currency documents
  createCurrency(
  input: CreateCurrencyInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCurrencyDataInput
) : CurrencyMutationOutput

  # Mutation for updating a Currency document
  updateCurrency(
  input: UpdateCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: CurrencySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCurrencyDataInput 
) : CurrencyMutationOutput

  # Mutation for upserting a Currency document
  upsertCurrency(
  input: UpsertCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: CurrencySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCurrencyDataInput
) : CurrencyMutationOutput

  # Mutation for deleting a Currency document
  deleteCurrency(
  input: DeleteCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: CurrencySelectorUniqueInput
) : CurrencyMutationOutput

  # Mutation for creating new HandleCurrency documents
  createHandleCurrency(
  input: CreateHandleCurrencyInput,
  "Deprecated (use 'input' field instead)."
  data: CreateHandleCurrencyDataInput
) : HandleCurrencyMutationOutput

  # Mutation for updating a HandleCurrency document
  updateHandleCurrency(
  input: UpdateHandleCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleCurrencySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleCurrencyDataInput 
) : HandleCurrencyMutationOutput

  # Mutation for upserting a HandleCurrency document
  upsertHandleCurrency(
  input: UpsertHandleCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleCurrencySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateHandleCurrencyDataInput
) : HandleCurrencyMutationOutput

  # Mutation for deleting a HandleCurrency document
  deleteHandleCurrency(
  input: DeleteHandleCurrencyInput,
  "Deprecated (use 'input' field instead)."
  selector: HandleCurrencySelectorUniqueInput
) : HandleCurrencyMutationOutput

  # Mutation for creating new Message documents
  createMessage(
  input: CreateMessageInput,
  "Deprecated (use 'input' field instead)."
  data: CreateMessageDataInput
) : MessageMutationOutput

  # Mutation for updating a Message document
  updateMessage(
  input: UpdateMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateMessageDataInput 
) : MessageMutationOutput

  # Mutation for upserting a Message document
  upsertMessage(
  input: UpsertMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateMessageDataInput
) : MessageMutationOutput

  # Mutation for deleting a Message document
  deleteMessage(
  input: DeleteMessageInput,
  "Deprecated (use 'input' field instead)."
  selector: MessageSelectorUniqueInput
) : MessageMutationOutput

  # Mutation for creating new Room documents
  createRoom(
  input: CreateRoomInput,
  "Deprecated (use 'input' field instead)."
  data: CreateRoomDataInput
) : RoomMutationOutput

  # Mutation for updating a Room document
  updateRoom(
  input: UpdateRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRoomDataInput 
) : RoomMutationOutput

  # Mutation for upserting a Room document
  upsertRoom(
  input: UpsertRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRoomDataInput
) : RoomMutationOutput

  # Mutation for deleting a Room document
  deleteRoom(
  input: DeleteRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomSelectorUniqueInput
) : RoomMutationOutput

  # Mutation for creating new I18nRoom documents
  createI18nRoom(
  input: CreateI18nRoomInput,
  "Deprecated (use 'input' field instead)."
  data: CreateI18nRoomDataInput
) : I18nRoomMutationOutput

  # Mutation for updating a I18nRoom document
  updateI18nRoom(
  input: UpdateI18nRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nRoomSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateI18nRoomDataInput 
) : I18nRoomMutationOutput

  # Mutation for upserting a I18nRoom document
  upsertI18nRoom(
  input: UpsertI18nRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nRoomSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateI18nRoomDataInput
) : I18nRoomMutationOutput

  # Mutation for deleting a I18nRoom document
  deleteI18nRoom(
  input: DeleteI18nRoomInput,
  "Deprecated (use 'input' field instead)."
  selector: I18nRoomSelectorUniqueInput
) : I18nRoomMutationOutput

  # Mutation for creating new RoomHandle documents
  createRoomHandle(
  input: CreateRoomHandleInput,
  "Deprecated (use 'input' field instead)."
  data: CreateRoomHandleDataInput
) : RoomHandleMutationOutput

  # Mutation for updating a RoomHandle document
  updateRoomHandle(
  input: UpdateRoomHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomHandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRoomHandleDataInput 
) : RoomHandleMutationOutput

  # Mutation for upserting a RoomHandle document
  upsertRoomHandle(
  input: UpsertRoomHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomHandleSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRoomHandleDataInput
) : RoomHandleMutationOutput

  # Mutation for deleting a RoomHandle document
  deleteRoomHandle(
  input: DeleteRoomHandleInput,
  "Deprecated (use 'input' field instead)."
  selector: RoomHandleSelectorUniqueInput
) : RoomHandleMutationOutput

  # Mutation for deleting a Equipment document
  deleteEquipment(
  input: DeleteEquipmentInput,
  "Deprecated (use 'input' field instead)."
  selector: EquipmentSelectorUniqueInput
) : EquipmentMutationOutput

  # Mutation for deleting a Law document
  deleteLaw(
  input: DeleteLawInput,
  "Deprecated (use 'input' field instead)."
  selector: LawSelectorUniqueInput
) : LawMutationOutput

}


